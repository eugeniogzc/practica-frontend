openapi: 3.0.0
info:
  title: Mi API
  version: 1.0.0
  description: API para probar Swagger con Node.js y Express

paths:
  /api/users:
    get:
      summary: Obtener todos los usuarios
      description: Retorna la lista de todos los usuarios.
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Error interno del servidor

    post:
      summary: Crear un nuevo usuario
      description: Registra un nuevo usuario en la base de datos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Usuario creado exitosamente
        '400':
          description: Datos inválidos
        '500':
          description: Error interno del servidor

  /api/users/{Id}:
    put:
      summary: Actualizar usuario
      description: Actualiza el nombre y el email de un usuario existente.
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Usuario actualizado correctamente
        '400':
          description: Datos inválidos
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor

    delete:
      summary: Eliminar usuario
      description: Elimina un usuario por su ID.
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: integer
          description: ID del usuario a eliminar.
      responses:
        '200':
          description: Usuario eliminado correctamente
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor

  /api/auth/login:
    post:
      summary: Iniciar sesión
      description: Permite autenticar un usuario y devuelve su información básica.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Credenciales incorrectas
        '500':
          description: Error interno del servidor

components:
  schemas:
    User:
      type: object
      properties:
        Id:
          type: integer
          example: 1
        Name:
          type: string
          example: Julen
        Email:
          type: string
          example: julen@example.com
        PasswordHash:
          type: string
          example: julen@example.com
        LastLogin:
          type: string
          example: julen@example.com
        CreatedAt:
          type: string
          example: julen@example.com

    CreateUser:
      type: object
      properties:
        name:
          type: string
          example: Julen
        email:
          type: string
          example: a01174098@tec.mx
        password:
          type: string
          example: password

    UpdateUser:
      type: object
      properties:
        name:
          type: string
          example: JulenHopp
        email:
          type: string
          example: Julen@email.com

    LoginRequest:
      type: object
      properties:
        user:
          type: string
          example: a01174098@tec.mx
        password:
          type: string
          example: password